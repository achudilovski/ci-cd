<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.8"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.8">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.69">
    <script>pipeline {
    agent { node &apos;aws-ec2-dev&apos; }
    environment {
        access_key = credentials(&apos;env-aws-access-key&apos;)
        secret_key = credentials(&apos;env-aws-secret-key&apos;)
        sonar_login = credentials(&apos;sonar-login&apos;)
        sonar_password = credentials(&apos;sonar-password&apos;)
        registry_url = &quot;803808824931.dkr.ecr.us-east-1.amazonaws.com&quot;
        app_weathercast = &quot;weathercast:latest&quot;
        app_port = &quot;80&quot;
    }
    stages {
        stage (&apos;[i] Clean WC&apos;) {
            steps {
                cleanWs()
            }
        }
        stage (&apos;[i] GIT&apos;) {
            steps {
                git branch: &apos;dev-jenkins&apos;, credentialsId: &apos;github&apos;, url: &apos;https://github.com/publius-github/ci-cd.git&apos;
            }
        }
        stage(&apos;[i] Sonarqube analyse&apos;) {
            steps {
                sh &apos;&apos;&apos;
                    echo &quot;=========================== Sonarqube analyse ===========================&quot;
                    /opt/sonar-runner/bin/sonar-runner \
                        -Dsonar.projectKey=$app_weathercast \
                        -Dsonar.sources=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast \
                        -Dsonar.tests=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecastTests \
                        -Dsonar.projectBaseDir=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast \
                        -Dsonar.host.url=http://10.0.1.100:9000 \
                        -Dsonar.login=$sonar_login \
                        -Dsonar.password=$sonar_password
                    sleep 5
                    REPORT_URL=$(cat ${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast/.sonar/report-task.txt | grep ceTaskUrl | sed &apos;s/^ceTaskUrl=//&apos;)
                    STATUSCODE=$(curl $REPORT_URL | jq .task.status)
                    echo &quot;status code is : &quot;$STATUSCODE
                    if [ $STATUSCODE != &apos;&quot;SUCCESS&quot;&apos; ]; then
                        echo &quot;Sonarqube quality criteria not met. Check the dashboard at sonarqube server&quot;
                        exit 1
                    fi
                    exit 0
                &apos;&apos;&apos;
            }
        }
        stage(&apos;[i] Docker build [WeatherForecast]&apos;) {
            steps {
                    sh &apos;&apos;&apos;
                    echo &quot;=========================== Build docker $app_weathercast image ===========================&quot;
                    cd ${WORKSPACE}
                    docker build -f &quot;app-examples/WeatherForecast/Dockerfile&quot; -t $registry_url/$app_weathercast .
                    &apos;&apos;&apos;
                }
        }
        stage(&apos;[i] Docker push [WeatherForecast]&apos;) {
            steps {
                script {
                    docker.withRegistry(&quot;https://$registry_url&quot;, &quot;ecr:us-east-1:aws&quot;) {
                    docker.image(&quot;$registry_url/$app_weathercast&quot;).push()
                    }
                }
            }
        }
        stage(&apos;[i] Changing Data in Terraform&apos;) {
            steps {
                sh &apos;&apos;&apos;
                echo &quot;\napp_image = \\&quot;$registry_url/$app_weathercast\\&quot;&quot; &gt;&gt; ${WORKSPACE}/terraform/02-terraform-ecs/vars/nonprod.tfvars
                echo &quot;app_port = \\&quot;$app_port\\&quot;&quot; &gt;&gt; ${WORKSPACE}/terraform/02-terraform-ecs/vars/nonprod.tfvars
                &apos;&apos;&apos;
                }
        }

        stage(&apos;[i] AWS Deployment&apos;) {
            steps {
                sh &apos;&apos;&apos;
                export AWS_ACCESS_KEY_ID=&quot;$access_key&quot;
                export AWS_SECRET_ACCESS_KEY=&quot;$secret_key&quot;
                cd ${WORKSPACE}/terraform/02-terraform-ecs/
                /usr/local/bin/terraform init
                /usr/local/bin/terraform plan --var-file=vars/nonprod.tfvars
                /usr/local/bin/terraform apply -auto-approve --var-file=vars/nonprod.tfvars
                &apos;&apos;&apos;
            }
        }
        stage(&apos;[i] Remove tmp docker files&apos;) {
            steps {
                    sh &apos;docker system prune -a -f&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
