pipeline {
    agent { node 'aws-ec2-cloud' }
    environment {
        access_key = credentials('env-aws-access-key')
        secret_key = credentials('env-aws-secret-key')
        sonar_login = credentials('sonar-login')
        sonar_password = credentials('sonar-password')
        registry_url = "803808824931.dkr.ecr.us-east-1.amazonaws.com"
        app_weathercast = "weathercast:latest"
        app_port = "80"
    }
    stages {
        stage ('[i] Clean WC') {
            steps {
                cleanWs()
            }
        }
        stage ('[i] GIT') {
            steps {
                git branch: 'dev-jenkins', credentialsId: 'github', url: 'https://github.com/publius-github/ci-cd.git'
            }
        }
        stage('[i] Sonarqube analyse') {
            steps {
                sh '''
                    echo "=========================== Sonarqube analyse ==========================="
                    /opt/sonar-runner/bin/sonar-runner \
                        -Dsonar.projectKey=$app_weathercast \
                        -Dsonar.sources=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast \
                        -Dsonar.tests=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecastTests \
                        -Dsonar.projectBaseDir=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast \
                        -Dsonar.host.url=http://10.0.1.100:9000 \
                        -Dsonar.login=$sonar_login \
                        -Dsonar.password=$sonar_password
                    sleep 5
                    REPORT_URL=$(cat ${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast/.sonar/report-task.txt | grep ceTaskUrl | sed 's/^ceTaskUrl=//')
                    STATUSCODE=$(curl $REPORT_URL | jq .task.status)
                    echo "status code is : "$STATUSCODE
                    if [ $STATUSCODE != '"SUCCESS"' ]; then
                        echo "Sonarqube quality criteria not met. Check the dashboard at sonarqube server"
                        exit 1
                    fi
                    exit 0
                '''
            }
        }
        stage('[i] Docker build [WeatherForecast]') {
            steps {
                    sh '''
                    echo "=========================== Build docker $app_weathercast image ==========================="
                    cd ${WORKSPACE}
                    docker build -f "app-examples/WeatherForecast/Dockerfile" -t $registry_url/$app_weathercast .
                    '''
                }
        }
        stage('[i] Docker push [WeatherForecast]') {
            steps {
                script {
                    docker.withRegistry("https://$registry_url", "ecr:us-east-1:aws") {
                    docker.image("$registry_url/$app_weathercast").push()
                    }
                } 
            }   
        }
        stage('[i] Changing Data in Terraform') {
            steps {
                sh '''
                echo "\napp_image = \\"registry_url\\app_weathercast\\"" >> ${WORKSPACE}/terraform/02-terraform-ecs/vars/nonprod.tfvars
                echo "app_port = \\"$app_port\\"" >> ${WORKSPACE}/terraform/02-terraform-ecs/vars/nonprod.tfvars
                '''
                }
        }

        stage('[i] AWS Deployment') {
            steps {
                sh '''
                export AWS_ACCESS_KEY_ID="$access_key"
                export AWS_SECRET_ACCESS_KEY="$secret_key"
                cd ${WORKSPACE}/terraform/02-terraform-ecs/
                /usr/local/bin/terraform init
                /usr/local/bin/terraform plan --var-file=vars/nonprod.tfvars
                /usr/local/bin/terraform apply -auto-approve --var-file=vars/nonprod.tfvars
                '''
            }
        }
        stage('[i] Remove tmp docker files') {
            steps {
                    sh 'docker system prune -a -f'
            }
        }
    }
}