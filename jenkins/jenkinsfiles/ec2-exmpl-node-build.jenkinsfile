pipeline {
    agent { node 'aws-ec2-cloud' }
    environment {
        registry_url = "803808824931.dkr.ecr.us-east-1.amazonaws.com"
        app_weathercast = "weathercast:latest"
    }
    stages {
        stage ('[i] Clean WC') {
            steps {
                cleanWs()
            }
        }
        stage ('[i] GIT') {
            steps {
                git branch: 'dev-jenkins', credentialsId: 'github', url: 'https://github.com/publius-github/ci-cd.git'
            }
        }
        stage('[i] Sonarqube analyse') {
            steps {
                sh '''
                    /opt/sonar-runner/bin/sonar-runner -Dsonar.projectKey=$app_weathercast -Dsonar.sources=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast -Dsonar.tests=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecastTests -Dsonar.projectBaseDir=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast
                '''
            }
        }
        stage('[i] Docker build [WeatherForecast]') {
            steps {
                    sh 'cd ${WORKSPACE}'
                    sh 'docker build -f "app-examples/WeatherForecast/Dockerfile" -t $registry_url/$app_weathercast .'
                }
        }
        stage('[i] Docker push [WeatherForecast]') {
            steps {
                script {
                    docker.withRegistry("https://$registry_url", "ecr:us-east-1:aws") {
                    docker.image("$registry_url/$app_weathercast").push()
                    }
                } 
            }   
        }

        stage('[i] Remove tmp docker files') {
            steps {
                    sh 'docker system prune -a -f'
            }
        }
    }
}