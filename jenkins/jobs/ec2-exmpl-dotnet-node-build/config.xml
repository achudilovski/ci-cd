<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.8"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.8">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.68">
    <script>pipeline {
    agent { node &apos;aws-ec2-cloud&apos; }
    environment {
        registry_url = &quot;803808824931.dkr.ecr.us-east-1.amazonaws.com&quot;
        app_weathercast = &quot;weathercast:latest&quot;
    }
    stages {
        stage (&apos;[i] Clean WC&apos;) {
            steps {
                cleanWs()
            }
        }
        stage (&apos;[i] GIT&apos;) {
            steps {
                git branch: &apos;dev-jenkins&apos;, credentialsId: &apos;github&apos;, url: &apos;https://github.com/publius-github/ci-cd.git&apos;
            }
        }
        stage(&apos;[i] Sonarqube analyse&apos;) {
            steps {
                sh &apos;&apos;&apos;
                    /opt/sonar-runner/bin/sonar-runner -Dsonar.projectKey=$app_weathercast -Dsonar.sources=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast -Dsonar.tests=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecastTests -Dsonar.projectBaseDir=${WORKSPACE}/app-examples/WeatherForecast/WeatherForecast
                &apos;&apos;&apos;
            }
        }
        stage(&apos;[i] Docker build [WeatherForecast]&apos;) {
            steps {
                    sh &apos;cd ${WORKSPACE}&apos;
                    sh &apos;docker build -f &quot;app-examples/WeatherForecast/Dockerfile&quot; -t $registry_url/$app_weathercast .&apos;
                }
        }
        stage(&apos;[i] Docker push [WeatherForecast]&apos;) {
            steps {
                script {
                    docker.withRegistry(&quot;https://$registry_url&quot;, &quot;ecr:us-east-1:aws&quot;) {
                    docker.image(&quot;$registry_url/$app_weathercast&quot;).push()
                    }
                }
            }
        }

        stage(&apos;[i] Remove tmp docker files&apos;) {
            steps {
                    sh &apos;docker system prune -a -f&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>